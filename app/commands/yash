#!/usr/bin/env php
<?
// Copyright (c) 2010 Guanoo, Inc.
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 3
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.

$YAWF_ROOT = getenv('YAWF_ROOT');
if (!$YAWF_ROOT || !is_dir($YAWF_ROOT) || !is_dir("$YAWF_ROOT/yawf"))
{
    print "\nPlease set the YAWF_ROOT environment variable\nto the folder name where YAWF may be found on\nyour computer, e.g. ~/cloud/projects/YAWF\n\n";
    exit;
}

require "$YAWF_ROOT/yawf/lib/Command.php";

class Yet_another_shell extends Command
{
    protected $is_quiet;
    protected $if_conds;
    protected $tests;
    protected $fails;

    // Create a new Yet Another Shell object

    public function __construct()
    {
        parent::__construct();
        $this->is_quiet = $this->opts->quiet;
        $this->if_conds = array();
        $this->tests = 0;
        $this->fails = 0;
        YAWF::hook('should', 'Yet_another_shell::hook');
        YAWF::hook('should_not', 'Yet_another_shell::hook');
    }

    // Hook the "should" and "should_not" calls

    public static function hook($method, $args)
    {
        list($test, $passed, $test_data) = $args;
        $method($test, $passed, $test_data);
    }

    // Run the YAWF shell

    public function run()
    {
        global $app;
        $stdin = fopen('php://stdin', 'r');
        $this->say('> ');
        while ($line = fgets($stdin))
        {
            $line = rtrim(trim($line), ';');
            if (substr($line, 0, 2) == '<?') continue; // ignore PHP open syntax

            // Parse "if", "else", "endif" logical constructs

            if (preg_match('/if\s+(.*):$/', $line, $matches))
            {
                eval('$bool = ' . $matches[1] . ' ;');
                array_unshift($this->if_conds, $bool);
                $line = '';
            }
            elseif (preg_match('/^else:/', $line))
            {
                if ($this->if_conds) $this->if_conds[0] = !$this->if_conds[0];
                $line = '';
            }
            elseif (preg_match('/^endif/', $line))
            {
                array_shift($this->if_conds);
                $line = '';
            }

            // Parse special cases e.g. if, quit and comments

            if (in_array(FALSE, $this->if_conds)) $line = '';
            if ($line == 'quit') exit;
            if ($line === '') $line = 'NULL'; // so we can eval a line
            if (preg_match('/^(#|\/\/)/', $line)) continue; # comments

            // Parse regular shell lines

            $line = $this->parse($line);
            try
            {
                $result = NULL;
                $command_regexp = '/^[a-z]\w*\s+/';
                eval(preg_match($command_regexp, $line) ? "$line;"
                                                        : "\$result=($line);");
                if (!is_null($result)) $this->say(print_r($result, TRUE)."\n");
            }
            catch (Exception $e)
            {
                print "ERROR: $e\n";
            }
            $this->say('> ');
        }
        $this->say("\n");
    }

    // Display the results of tests we ran

    public function display_test_results()
    {
        if ($this->tests > 0)
        {
            $test_s = $this->tests == 1 ? 'test' : 'tests';
            if ($this->fails > 0)
            {
                print "Failed $this->fails of $this->tests $test_s\n";
            }
            else
            {
                print "Passed $this->tests $test_s\n";
            }
        }
    }

    // Get/set YAWF environment variables

    public function env($key, $value = NULL)
    {
        $command = "yawf_env $key";
        if (!is_null($value)) $command .= "=\"$value\"";
        return rtrim(exec($command));
    }

    // Send an HTTP request via a method to a URL

    public function http($method, $url, $params = array())
    {
        load_tool('CURL');
        $headers = array();
        $data = NULL;
        if ($params && ($method == 'get' || $method == 'delete'))
        {
            $q = (strpos($url, '?') === FALSE ? '?' : '&');
            $url .= $q . urlencode_array($params);
        }
        elseif ($method == 'post' || $method == 'put')
        {
            $data = $params;
        }
        return CURL::method($method, $url, $headers, $data);
    }

    // Parse "should", "should_not" and similar commands

    protected function parse($line)
    {
        if (preg_match('/^(do|for|if|while)/', $line)) return $line;
        $line = preg_replace('/^should\s+not/', 'should_not', $line);
        return preg_replace('/^(\w[\w:]*)\s+(.*)$/', '\1(\2)', $line);
    }

    // Say something unless we're being quiet

    public function say($text)
    {
        if (!$this->is_quiet) print $text;
    }

    // Run a line of SQL

    public function sql($sql)
    {
        $model = new Model();
        $result = $model->query($sql);
        if (!is_object($result)) return;
        $output = '';
        while ($object = $result->fetch_object())
        {
            foreach ($object as $field => $value)
            {
                $output .= "$field:\t$value\n";
            }
        }
        return $output;
    }

    // Create a mock params object for tests

    public function params($array = array())
    {
        YAWF::prop(Symbol::PARAMS, array_to_object($array));
    }

    // Create a mock cookie object for tests

    public function cookie($array = array())
    {
        require_once('lib/Request.php');
        YAWF::prop(Symbol::COOKIE, new Request_cookie($array));
    }

    // Create a mock server object for tests

    public function server($array = array())
    {
        require_once('lib/Request.php');
        YAWF::prop(Symbol::SERVER, new Request_server($array));
    }

    // Create a mock session object for tests

    public function session($array = array())
    {
        require_once('lib/Request.php');
        YAWF::prop(Symbol::SESSION, new Request_session($array));
    }

    // Create a mock flash object for tests

    public function flash($array = array())
    {
        require_once('lib/Controller.php');
        YAWF::prop(Symbol::FLASH, new Controller_flash($array));
    }

    // Parse lines like "$this->should('work', 1==1)" in yash scripts

    public function should($test, $passed = FALSE, $test_data = NULL)
    {
        $desc = $passed ? 'Pass' : 'Fail';
        $desc .= ": should $test";
        if ($passed)
        {
            Log::info($desc);
        }
        else
        {
            if (!is_null($test_data)) $desc .= "\n\n" . print_r($test_data, TRUE);
            Log::error($desc);
        }
        print "$desc\n";
        $this->tests++;
        if (!$passed) $this->fails++;
        return $passed;
    }

    // Parse lines like "$this->should_not('fail', 1==2)" in yash scripts

    public function should_not($desc, $failed = TRUE, $test_data = NULL)
    {
        return $this->should("not $desc", !$failed, $test_data);
    }
}

// Create our very awesome Yet Another Shell object

$yash = new Yet_another_shell(getcwd());

// Add functions to create mock objects for testing

function params($array = array()) { global $yash; $yash->params($array); }
function cookie($array = array()) { global $yash; $yash->cookie($array); }
function flash($array = array()) { global $yash; $yash->flash($array); }
function server($array = array()) { global $yash; $yash->server($array); }
function session($array = array()) { global $yash; $yash->session($array); }

// Add shortcuts to should and should_not functions

function should($test, $passed = FALSE, $test_data = NULL) { global $yash; return $yash->should($test, $passed, $test_data); }
function should_not($test, $failed = TRUE, $test_data = NULL) { global $yash; return $yash->should_not($test, $failed, $test_data); }

// Useful functions

function say($text) { global $yash; return $yash->say($text); }
function sql($sql) { global $yash; return $yash->sql($sql); }
function env($key, $value = NULL) { global $yash; return $yash->env($key, $value); }
function setenv($key, $value) { putenv("$key=$value"); }

// HTTP functions

function get($url, $params = array()) { global $yash; return $yash->http('get', $url, $params); }
function post($url, $params = array()) { global $yash; return $yash->http('post', $url, $params); }
function put($url, $params = array()) { global $yash; return $yash->http('put', $url, $params); }
function delete($url, $params = array()) { global $yash; return $yash->http('delete', $url, $params); }

// Logging functions

function debug($text) { return Log::debug($text); }
function info($text) { return Log::info($text); }
function warn($text) { return Log::warn($text); }
function error($text) { return Log::error($text); }
function alert($text) { return Log::alert($text); }

// Run the shell, then display all the test results

$app = $yash->app;
$yash->run();
$yash->display_test_results();

// End of "commands/yash"
