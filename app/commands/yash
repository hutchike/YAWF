#!/usr/bin/env php
<?
// Copyright (c) 2010 Guanoo, Inc.
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 3
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.

$YAWF_ROOT = getenv('YAWF_ROOT');
if (!$YAWF_ROOT || !is_dir($YAWF_ROOT) || !is_dir("$YAWF_ROOT/yawf"))
{
    print "\nPlease set the YAWF_ROOT environment variable\nto the folder name where YAWF may be found on\nyour computer, e.g. ~/cloud/projects/YAWF\n\n";
    exit;
}

require "$YAWF_ROOT/yawf/lib/Command.php";

class Yet_another_shell extends Command
{
    protected $is_quiet;
    protected $if_conds;
    protected $tests;
    protected $fails;

    // Create a new Yet Another Shell object

    public function __construct()
    {
        parent::__construct();
        $this->is_quiet = $this->opts->quiet;
        $this->if_conds = array();
        $this->tests = 0;
        $this->fails = 0;
    }

    // Run the YAWF shell

    public function run()
    {
        global $app;
        $stdin = fopen('php://stdin', 'r');
        $this->say('> ');
        while ($line = fgets($stdin))
        {
            $line = rtrim(trim($line), ';');

            // Parse "if", "else", "endif" logical constructs

            if (preg_match('/if\s+(.*):$/', $line, $matches))
            {
                eval('$bool = ' . $matches[1] . ' ;');
                array_unshift($this->if_conds, $bool);
                $line = '';
            }
            elseif (preg_match('/^else:/', $line))
            {
                if ($this->if_conds) $this->if_conds[0] = !$this->if_conds[0];
                $line = '';
            }
            elseif (preg_match('/^endif/', $line))
            {
                array_shift($this->if_conds);
                $line = '';
            }

            // Parse special cases e.g. if, quit and comments

            if (in_array(FALSE, $this->if_conds)) $line = '';
            if ($line == 'quit') exit;
            if ($line === '') $line = 'NULL'; // so we can eval a line
            if (preg_match('/^(#|\/\/)/', $line)) continue; # comments

            // Parse regular shell lines

            $line = $this->parse($line);
            try
            {
                $result = NULL;
                $command_regexp = '/^[a-z]\w*\s+/';
                eval(preg_match($command_regexp, $line) ? "$line;"
                                                        : "\$result=($line);");
                if (!is_null($result)) $this->say(print_r($result, TRUE)."\n");
            }
            catch (Exception $e)
            {
                print "ERROR: $e\n";
            }
            $this->say('> ');
        }
        $this->say("\n");
    }

    // Display the results of tests we ran

    public function display_test_results()
    {
        if ($this->tests > 0)
        {
            $test_s = $this->tests == 1 ? 'test' : 'tests';
            if ($this->fails > 0)
            {
                print "Failed $this->fails of $this->tests $test_s\n";
            }
            else
            {
                print "Passed $this->tests $test_s\n";
            }
        }
    }

    // Send an HTTP request via a method to a URL

    public function http($method, $url, $params = array())
    {
        $curl = curl_init();
        if ($method == 'get' && $params)
        {
            $url .= '?' . urlencode_array($params);
        }
        elseif ($method == 'post')
        {
            curl_setopt($curl, CURLOPT_POSTFIELDS, $params);
        }
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, strtoupper($method));
        $content = curl_exec($curl);
        curl_close($curl);
        return $content;
    }

    // Parse "p", "puts", "should", "should_not" and similar commands

    protected function parse($line)
    {
        if (preg_match('/^(do|for|if|while)/', $line)) return $line;
        $line = preg_replace('/^should\s+not/', 'should_not', $line);
        return preg_replace('/^(\w+)\s+(.*)$/', '\1(\2)', $line);
    }

    // Say something unless we're being quiet

    public function say($text)
    {
        if (!$this->is_quiet) print $text;
    }

    // Parse lines like "$this->should('work', 1==1)" in yash scripts

    public function should($test, $is_ok, $var = NULL)
    {
        $text = $is_ok ? 'Pass' : 'Fail';
        $text .= ": should $test";
        if ($is_ok)
        {
            Log::info($text);
        }
        else
        {
            if (!is_null($var)) $text .= "\n\n" . print_r($var, TRUE);
            Log::error($text);
        }
        print "$text\n";
        $this->tests++;
        if (!$is_ok) $this->fails++;
        return $is_ok;
    }

    // Parse lines like "$this->should_not('fail', 1==2)" in yash scripts

    public function should_not($text, $is_ok, $var = NULL)
    {
        return $this->should("not $text", !$is_ok, $var);
    }
}

// Create our very awesome Yet Another Shell object

$yash = new Yet_another_shell(getcwd());

// Add a couple of rather nice Ruby print functions

function p($text) { print_r($text); return NULL; }
function puts($text) { print "$text\n"; return NULL; }

// Add shortcuts to should and should_not functions

function should($text, $is_ok, $var = NULL) { global $yash; return $yash->should($text, $is_ok, $var); }
function should_not($text, $is_ok, $var = NULL) { global $yash; return $yash->should_not($text, $is_ok, $var); }

// Useful functions

function say($text) { global $yash; return $yash->say($text); }
function setenv($key, $value) { putenv("$key=$value"); }

// HTTP functions

function get($url, $params = array()) { global $yash; return $yash->http('get', $url, $params); }
function post($url, $params = array()) { global $yash; return $yash->http('post', $url, $params); }
function put($url, $params = array()) { global $yash; return $yash->http('put', $url, $params); }
function delete($url, $params = array()) { global $yash; return $yash->http('delete', $url, $params); }

// Logging functions

function debug($text) { return Log::debug($text); }
function info($text) { return Log::info($text); }
function warn($text) { return Log::warn($text); }
function error($text) { return Log::error($text); }
function alert($text) { return Log::alert($text); }

// Run the shell, then display all the test results

$app = $yash->app;
$yash->run();
$yash->display_test_results();

// End of "commands/yash"
