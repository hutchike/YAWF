#!/usr/bin/env php
<?
// Copyright (c) 2009 Guanoo, Inc.
// 
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 3
// of the License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.

$YAWF_ROOT = getenv('YAWF_ROOT');
if (!$YAWF_ROOT || !is_dir($YAWF_ROOT) || !is_dir("$YAWF_ROOT/yawf"))
{
    print "\nPlease set the YAWF_ROOT environment variable\nto the folder name where YAWF may be found on\nyour computer, e.g. ~/cloud/projects/YAWF\n\n";
    exit;
}

require "$YAWF_ROOT/yawf/lib/Command.php";

class YAWF_command extends Command
{
    // Constants

    const DEFAULT_ADDRESS = '127.0.0.1:80';

    // Methods

    // Run the chosen command

    public function run()
    {
        $cmd = array_shift($this->args);
        switch (strtolower($cmd))
        {
            case 'app':
                $this->create_app($this->pad_args(1));
                break;

            case 'doc':
                $this->create_docs();
                break;

            case 'data':
                $this->create_databases_for($this->pad_args(1));
                break;

            case 'perms':
                $this->set_permissions();
                break;

            case 'vhost':
                $this->create_vhost_file($this->pad_args(4));
                break;

            default:
                $this->usage();
        }
    }

    // Return a single argument or an args array of a particular length

    private function pad_args($length)
    {
        $args = $this->args;
        while (count($args) < $length) array_push($args, '');
        return ($length == 1 ? $args[0] : $args);
    }

    // Display a usage message, defaulting to the standard help message

    private function usage($cmd = '', $message = '')
    {
        if ($cmd && $message) die("\nusage: $cmd\n\n$message\n\n");
        $usage = <<<End_of_usage
usage: yawf ACTION [arg1 arg2 ...]

where ACTION is one of:
* app    : Create a new YAWF application
* data   : Update an app's database schema
* doc    : Create fresh YAWF documentation
* perms  : Set the file/folder permissions
* vhost  : Create a virtual host file
* help   : Display this help message
End_of_usage;
        die("\n$usage\n\n");
    }

    // Create a new YAWF app with a name

    private function create_app($name)
    {
        global $YAWF_ROOT;
        if (!$name) $this->usage('yawf app app_name', 'You need to choose a name for your new app, e.g. "myapp"');

        $template = "$YAWF_ROOT/apps/template.app";
        $new_app = "$YAWF_ROOT/apps/$name";
        if (file_exists("$new_app")) $this->quit("Sorry but the app \"$name\" already exists in this folder:\n$new_app");

        // Prepare the application directory tree

        mkdir("$new_app");
        $this->recurse_copy("$template/app", "$new_app/app");
        symlink("$YAWF_ROOT/yawf", "$new_app/yawf");

        // Rename the application's command

        $cmd_dir = "$new_app/app/commands";
        rename("$cmd_dir/command", "$cmd_dir/$name");

        // Set all the file and folder perms

        $this->set_permissions_for($new_app);
    }

    private function set_permissions_for($app_name)
    {
        global $YAWF_ROOT;
        $app_dir = "$YAWF_ROOT/apps/$app_name/app";
        $cmd_dir = "$app_dir/commands";

        // Make all the commands executable

        if (is_dir($cmd_dir))
        {
            $dir = opendir($cmd_dir);
            while ($command = readdir($dir))
            {
                if (preg_match('/(^\.|^readme|\.txt$)/i', $command)) continue;
                chmod("$cmd_dir/$command", 0777);
            }
            closedir($dir);
        }

        // Make some directories writable

        $writable_dirs = array('logs', 'tmp/cache', 'tmp/queue', 'tmp/sessions', 'tmp/uploads');
        foreach ($writable_dirs as $dir)
        {
            $writeable_dir = "$app_dir/$dir";
            if (is_dir($writeable_dir)) chmod($writeable_dir, 0777);
        }
    }

    // Create doc files using "phpdoc"

    private function create_docs()
    {
        global $YAWF_ROOT;
        system("phpdoc -o HTML:frames:earthli -d $YAWF_ROOT/yawf -t $YAWF_ROOT/app/public/docs");
    }

    // (Re)create databases ("live" and "test") using the "mysql" command

    private function create_databases_for($app_name)
    {
        global $YAWF_ROOT;
        if (!$app_name) $this->usage('yawf data app_name', 'You need to provide the name of your app, e.g. "myapp"');

        // Get the app dir and app config file

        $app_dir = "$YAWF_ROOT/apps/$app_name/app";
        $config_file = "$app_dir/configs/app.yaml";
        if (!is_dir($app_dir)) $this->usage('yawf data app_name', "No app folder found here: $app_dir");
        if (!is_file($config_file)) $this->usage('yawf data app_name', "No config file found here: $config_file");

        // Load the app config file and schema

        load_helper('YAML');
        $config = YAML::load_file("$app_dir/configs/app.yaml");
        $database = $config['database'];
        $connector = array_key($database, 'connector');
        $username = array_key($database, 'username', 'root');
        $password = array_key($database, 'password', '');
        $database_live = array_key($database, 'database_live', "${app_name}_live");
        $database_test = array_key($database, 'database_test', "${app_name}_test");
        $schema_file = "$app_dir/data/" . array_key($database, 'schema', "$app_name.sql");
        if (!is_file($schema_file)) $this->usage('yawf data app_name', "No schema file found here: $schema_file");
        if (preg_match('/mysql/i', $connector))
        {
            $login = "-u$username" . ($password ? " -p$password" : '');
            $dump_file = "/tmp/$database_live.dump";
            system("mysqldump --no-create-info --complete-insert $login $database_live > $dump_file");
            system("mysql $login $database_live <$schema_file");
            system("mysql $login $database_live <$dump_file");
            system("mysql $login $database_test <$schema_file");
            unlink($dump_file);
        }
        else
        {
            print "Sorry but database connector $connector isn't supported yet";
        }
    }

    // Set the application folder permissions

    private function set_permissions()
    {
        global $YAWF_ROOT;
        $apps = $this->args;
        if (!count($apps) || $apps[0] == 'all')
        {
            $apps = array();
            $dir = opendir("$YAWF_ROOT/apps/");
            while ($app_name = readdir($dir))
            {
                if (preg_match('/^\./', $app_name)) continue;
                $folder = "$YAWF_ROOT/apps/$app_name";
                if (is_dir($folder) || is_link($folder)) $apps[] = $app_name;
            }
            closedir($dir);
        }

        foreach ($apps as $app_name)
        {
            $folder = "$YAWF_ROOT/apps/$app_name";
            if (!is_dir($folder) && !is_link($folder)) $this->usage('yawf perms app_name [app_name2...]', "App \"$app_name\" does not exist in the apps directory here:\n$YAWF_ROOT/apps");
            $this->set_permissions_for($app_name);
        }
    }

    // Create a new YAWF virtual host file

    private function create_vhost_file($args)
    {
        global $YAWF_ROOT;
        list ($domain_name, $app_name, $address1, $address2) = $args;

        if (!$app_name) $app_name = $domain_name;
        if (!file_exists("$YAWF_ROOT/apps/$app_name")) $this->usage('yawf vhost mysite.org [app_name]', "App \"$app_name\" does not exist in the apps directory here:\n$YAWF_ROOT/apps");
        $internal_ip = getenv('INTERNAL_IP');
        $apache_port = getenv('APACHE_PORT') ? getenv('APACHE_PORT') : 80;
        if (!$address1 && $internal_ip) $address1 = "$internal_ip:$apache_port";
        if (!$address1) $address1 = self::DEFAULT_ADDRESS;
        if (!$address2) $address2 = $address1;
        $comment = ($address1 == $address2 ? '# ' : '');

        if (!$domain_name) $this->usage('yawf vhost mysite.org [app_name] [host_ip:port] [host_ip2:port2]', 'You need to choose a domain name for your new vhost file, e.g. "mysite.org"');

        $template_file = "$YAWF_ROOT/app/configs/template.vhost";
        $template = file_get_contents($template_file);
        $patterns = array('/{ADDRESS1}/', '/{ADDRESS2}/', '/{APACHE_LOGS_DIR}/', '/{APP}/', '/{DOMAIN}/', '/{YAWF_ROOT}/', '/{#}/');
        $replacements = array($address1, $address2, "$YAWF_ROOT/logs", $app_name, $domain_name, $YAWF_ROOT, $comment);
        $config = preg_replace($patterns, $replacements, $template);
        $vhost_file = "$YAWF_ROOT/vhosts/$domain_name";
        if (!is_dir("$YAWF_ROOT/vhosts")) mkdir("$YAWF_ROOT/vhosts");
        file_put_contents($vhost_file, $config);
        $this->quit("A new vhost file has been created here:\n$vhost_file");
    }

    // Recursively copy a directory

    private function recurse_copy($src, $dst)
    {
        $dir = opendir($src);
        mkdir($dst);
        while( FALSE !== ($file = readdir($dir)) )
        {
            if (($file != '.') && ($file != '..'))
            {
                is_dir("$src/$file") ?
                    $this->recurse_copy("$src/$file", "$dst/$file") :
                    copy("$src/$file", "$dst/$file");
            }
        }
        closedir($dir);
    } 
}

$yawf = new YAWF_command();
$yawf->run();

// End of "admin/yawf"
